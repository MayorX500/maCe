#!/bin/bash

PROGRAMNAME=mace

working_dir=$(pwd)

array=(valgrind gdb bear gcc make)
doing="$(echo $1 | tr '[:upper:]' '[:lower:]')"
opt2=$2

NL="\n"


function check_dependencies {    
        local passed=0;    
    
        for i in "${array[@]}"    
        do    
                if ! hash $i >/dev/null 2>&1 ; then    
                        passed=1    
                        notify-send "$i - Not Found    
Please install it and run the script again"     
                fi    
        done    
        if [ $passed -gt 0 ]; then    
                exit    
        fi    
}


function write_main {
	echo -n "#include <stdio.h>

int main(int argc, char** argv){
	printf(\"Hello World$NL$NL\");
	printf(\"Number of arguments: '%d'\\nProgram ran: '%s'$NL\",argc,argv[0]);
	return 0;
}

">$opt2/main.c
}


function write_make {
	echo -ne "ODIR=obj/

PROGS=$opt2

GITGUD= -march=native -O3  -pipe -D_GNU_SOURCE -fomit-frame-pointer
DEBUG=-O0 -Wextra -g
MEMLEAK=-ggdb  -fno-omit-frame-pointer -fsanitize=undefined
# -fomit-frame-pointer -ftree-loop-linear -ftree-vectorize
#  -fsanitize=undefined

CC=gcc
CFLAGS = \$(DEBUG) -pedantic -Wall -std=c99 -lm

SOURCES=\$(wildcard *.c)

SOURCES_OBJ=\$(patsubst %.c,\$(ODIR)/%.o,\$(SOURCES))

print-% : ; @echo \$* = \$(\$*)

\$(ODIR)/%.o : %.c \$(DEPS)
	@ mkdir -p obj
	\$(CC) \$(CFLAGS) -c -o \$@ $<

program: \$(SOURCES_OBJ)
	\$(CC) \$(CFLAGS) \$(wildcard \$(ODIR)/*.o) -o \$(PROGS)

debug: \$(SOURCES_OBJ) \$(MY_LIBS_OBJ)
	\$(CC) \$(CFLAGS) \$(DEBUG) \$(wildcard \$(ODIR)/*.o) -o \$(PROGS)

memleak: \$(SOURCES_OBJ) \$(MY_LIBS_OBJ)
	\$(CC) \$(MEMLEAK) \$(CFLAGS)  \$(wildcard \$(ODIR)/*.o) -o \$(PROGS)

clean:
	rm obj -rf
	rm \$(PROGS)

run:
	./\$(PROGS)

gdb:
	gdb \$(PROGS)

val:
	valgrind --leak-check=full --track-origins=yes --verbose ./\$(PROGS)



" > $opt2/Makefile
}


function write_help_run {
	echo -ne "$PROGRAMNAME PROJECT <HELP>

Commands:

	DEFAULT |> Runs by default with no need of extra input.

	DEBUG	|> Runs the program in debug mode (Low Compiler Optimization) for easy error checking.

	MEMLEAK |> Runs the program with memory leak specific flag for that specific purpouse.
	
	CLEAN	|> Removes all files created with make.
	
	HELP	|> Shows this specific menu.
"
}


function write_help {
	echo -ne "The C project.
Usage:
	$PROGRAMNAME [new|compile|run] <NAME>

HELP:
		
	NEW 	 |> Needs a NAME to create the project folder.
		    It wil create a new directory with the project name.

	COMPILE  |> Compiles the project and creates a «compile_commands.json»
		    It can be disabled with the flag '--no_json'.

	PROJECT	 |> Compiles the project and runs the program.
		    It has other running modes. Do <RUN help> to list the different modes.
"
}


function __run_main__ {

	if [[ $doing == "new" ]]; then
		mkdir $opt2
		write_make
		write_main

	elif [[ $doing == "compile" ]]; then
		flag="$(echo $opt2 | tr '[:upper:]' '[:lower:]')"
		if [[ $flag == "--no_json" ]]; then
			(make)
		else
			(bear -- make)
		fi

	elif [[ $doing == "project" ]]; then
		flag="$(echo $opt2 | tr '[:upper:]' '[:lower:]')"
		if [[ $flag == "help" ]]; then
			write_help_run
		elif [[ $flag == "debug" ]]; then
			(make debug && make gdb)
		elif [[ $flag == "memleak" ]]; then
			(make memleak && make val)
		elif [[ $flag == "clean" ]]; then
			(make clean)
		else
			(make && make run)
		fi
	else
		write_help
		exit
	fi
}

check_dependencies
__run_main__
